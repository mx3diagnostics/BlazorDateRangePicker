@*
    * author: Sergey Zaikin zaikinsr@yandex.ru
    * copyright: Copyright (c) 2019 Sergey Zaikin. All rights reserved.
    * license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
*@

@inherits DatePickerComponentBase

<div class="daterangepicker-container">
    @if (PickerTemplate == null)
    {
        <div class="daterangepicker-value-container">
            <input id="@ParentId" type="text" @attributes="CombinedAttributes" value="@FormattedRange" @oninput="OnTextInput" @onfocusin="Open" @onfocusout="LostFocus" />

            @if (HasValue && AllowClear)
            {
                <button type="button"
                        class="typeahead-clear-indicator typeahead-indicator"
                        title="Clear Selection"
                        @onclick="Clear">
                    <svg height="20" width="20" viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="typeahead-svg">
                        <path d="M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z" />
                    </svg>
                </button>
            }
        </div>
    }
    else
    {
        @PickerTemplate(((object)this) as BlazorDateRangePicker.DateRangePicker);
    }
    <div style="visibility:@(Visible ? "visible" : "hidden");">
        <div id="@Id" class="daterangepicker @RootStyles" style="top: 100%;left: 0px;right:auto;position:absolute;">

            <div class="ranges">
                @if (Ranges != null && Ranges.Any())
                {
                    <ul>
                        @foreach (var range in Ranges)
                        {
                            <li class="@(range.Key == ChosenLabel ? "active" : "")" @onclick="@(args => ClickRange(args, range.Key))">@range.Key</li>
                        }
                        @if (ShowCustomRangeLabel == true)
                        {
                            <li class="@(CustomRangeLabel == ChosenLabel ? "active" : "")" @onclick="@(args => ClickRange(args, CustomRangeLabel))">@CustomRangeLabel</li>
                        }
                    </ul>
                }
            </div>
            <div class="drp-calendar left @(SingleDatePicker == true || ShowOnlyOneCalendar == true ? "single" : "")">

                <div class="calendar-table">
                    <Calendar Side="@SideType.Left"
                              CalendarData="@LeftCalendar"
                              ShowWeekNumbers="@ShowWeekNumbers"
                              ShowISOWeekNumbers="@ShowISOWeekNumbers"
                              MinDate="@MinDate"
                              MaxDate="@MaxDate"
                              LinkedCalendars="@LinkedCalendars"
                              ShowDropdowns="@ShowDropdowns"
                              SingleDatePicker="@SingleDatePicker"
                              WeekAbbreviation="@WeekAbbreviation"
                              StartDate="@StartDate"
                              OnMonthChanged="@(date => MonthChanged(date, SideType.Left))"
                              OnClickDate="@(date => ClickDate(date))"
                              HoverDate="@HoverDate"
                              OnHoverDate="@(date => OnHoverDate(date))"
                              Culture="@Culture"
                              DaysEnabledFunction="@DaysEnabledFunction"
                              CustomDateFunction="@CustomDateFunction"
                              CustomDateClass="@CustomDateClass"
                              MaxSpan="@MaxSpan"
                              EndDate="@EndDate" />
                </div>

            </div>
            @if (SingleDatePicker != true && ShowOnlyOneCalendar != true)
            {
                <div class="drp-calendar right">

                    <div class="calendar-table">
                        <Calendar Side="@SideType.Right"
                                  CalendarData="@RightCalendar"
                                  ShowWeekNumbers="@ShowWeekNumbers"
                                  ShowISOWeekNumbers="@ShowISOWeekNumbers"
                                  MinDate="@MinDate"
                                  MaxDate="@MaxDate"
                                  LinkedCalendars="@LinkedCalendars"
                                  ShowDropdowns="@ShowDropdowns"
                                  SingleDatePicker="@SingleDatePicker"
                                  WeekAbbreviation="@WeekAbbreviation"
                                  StartDate="@StartDate"
                                  OnMonthChanged="@(date => MonthChanged(date, SideType.Right))"
                                  OnClickDate="@(date => ClickDate(date))"
                                  HoverDate="@HoverDate"
                                  OnHoverDate="@(date => OnHoverDate(date))"
                                  Culture="@Culture"
                                  DaysEnabledFunction="@DaysEnabledFunction"
                                  CustomDateFunction="@CustomDateFunction"
                                  CustomDateClass="@CustomDateClass"
                                  MaxSpan="@MaxSpan"
                                  EndDate="@EndDate" />
                    </div>

                </div>
            }
            <div class="drp-buttons">

                <span class="drp-selected"></span>
                <button class="cancelBtn @ButtonClasses @CancelButtonClasses" @onclick="ClickCancel" type="button">@CancelLabel</button>
                <button class="applyBtn @ButtonClasses @ApplyButtonClasses" @onclick="ClickApply" disabled="@(StartDate == null || EndDate == null)" type="button">@ApplyLabel</button>

            </div>

        </div>
    </div>
</div>
@code {

    [Parameter]
    public RenderFragment<DateRangePicker> PickerTemplate { get; set; }

    [Parameter]
    public bool AllowClear { get; set; } = true;

    private CalendarType LeftCalendar { get; set; }
    private CalendarType RightCalendar { get; set; }

    private DateTimeOffset? HoverDate { get; set; }

    private string EditText { get; set; }

    private bool HasValue => (StartDate != null || EndDate != null);

    public string FormattedRange
    {
        get
        {
            if (!string.IsNullOrEmpty(EditText))
            {
                return EditText;
            }

            if (SingleDatePicker == true && StartDate != null)
            {
                return $"{StartDate.Value.ToString(DateFormat)}";
            }

            if (StartDate != null && EndDate != null)
            {
                return $"{StartDate.Value.ToString(DateFormat)} - {EndDate.Value.ToString(DateFormat)}";
            }
            else
            {
                return string.Empty;
            }
        }
        set { }
    }

    private string RootStyles
    {
        get
        {
            var result = new List<string>();
            if (Ranges?.Any() == true) { result.Add("show-ranges"); }
            if (AutoApply == true) { result.Add("auto-apply"); }
            if (Drops == DropsType.Up) { result.Add("drop-up"); }
            if (((Ranges == null || Ranges?.Any() == false) && SingleDatePicker != true) || AlwaysShowCalendars == true || CalendarsVisible) { result.Add("show-calendar"); }

            result.Add($"opens{Enum.GetName(typeof(SideType), Opens).ToLower()}");

            return string.Join(" ", result);
        }
    }

    protected override Task OnInitializedAsync()
    {
        LeftCalendar = new CalendarType(Culture);
        RightCalendar = new CalendarType(Culture);

        StartDate = StartDate?.Date;
        EndDate = EndDate?.Date.AddDays(1).AddTicks(-1);

        LeftCalendar.Month = StartDate.HasValue ? StartDate.Value : DateTime.Now;
        RightCalendar.Month = EndDate.HasValue ? EndDate.Value : DateTime.Now.AddMonths(1);
        if (LeftCalendar.Month.Year == RightCalendar.Month.Year && LeftCalendar.Month.Month == RightCalendar.Month.Month)
        {
            RightCalendar.Month = RightCalendar.Month.AddDays(1);
        }

        return base.OnInitializedAsync();
    }

    public async Task OnTextInput(ChangeEventArgs e)
    {
        EditText = e.Value.ToString();
        if (SingleDatePicker != true && !e.Value.ToString().Contains("-")) { return; }
        var dateStrings = e.Value.ToString().Split('-').Select(s => s.Trim()).ToList();
        if (SingleDatePicker == true)
        {
            dateStrings = new List<string> { e.Value.ToString(), string.Empty };
        }
        if (dateStrings.Count != 2) { return; }

        var startDateParsed = DateTimeOffset.TryParseExact(dateStrings[0], DateFormat, Culture, System.Globalization.DateTimeStyles.None, out var startDate);
        var endDateParsed = DateTimeOffset.TryParseExact(dateStrings[1], DateFormat, Culture, System.Globalization.DateTimeStyles.None, out var endDate);

        if (endDateParsed && endDate > MaxDate)
        {
            endDate = MaxDate.Value.Date;
        }

        if (startDateParsed && startDate < MinDate)
        {
            startDate = MinDate.Value.Date.AddDays(1).AddTicks(-1);
        }

        if (startDateParsed && SingleDatePicker == true)
        {
            StartDate = startDate.Date;
            EndDate = startDate.Date;
            await ClickApply(null);
            EditText = null;
        }

        if (startDateParsed && endDateParsed && startDate < endDate
            && (!MinDate.HasValue || startDate > MinDate)
            && (!MaxDate.HasValue || endDate < MaxDate))
        {
            StartDate = startDate.Date;
            EndDate = endDate.Date.AddDays(1).AddTicks(-1);
            await ClickApply(null);
            EditText = null;
        }
    }

    public void LostFocus(FocusEventArgs e)
    {
        EditText = null;
    }

    private async Task ClickRange(MouseEventArgs e, string label)
    {
        ChosenLabel = label;
        if (label == CustomRangeLabel)
        {
            ShowCalendars();
        }
        else
        {
            var dates = Ranges[label];
            StartDate = dates.Start.Date;
            EndDate = dates.End.Date.AddDays(1).AddTicks(-1);

            if (AlwaysShowCalendars != true)
            { HideCalendars(); }
            await ClickApply(e);
        }
    }

    private void MonthChanged(DateTimeOffset date, SideType side)
    {
        if (side == SideType.Left)
        {
            LeftCalendar.Month = date;
            if (LinkedCalendars == true)
            {
                RightCalendar.Month = LeftCalendar.Month.AddMonths(1);
            }
        }
        else
        {
            RightCalendar.Month = date;
            if (LinkedCalendars == true)
            {
                LeftCalendar.Month = RightCalendar.Month.AddMonths(-1);
            }
        }
    }

    private async Task ClickDate(DateTimeOffset date)
    {
        HoverDate = null;
        if (EndDate.HasValue || StartDate == null || date < StartDate)
        { //picking start
            EndDate = null;
            StartDate = date.Date;
        }
        else if (!EndDate.HasValue && date < StartDate)
        {
            //special case: clicking the same date for start/end,
            //but the time of the end date is before the start date
            EndDate = StartDate;
        }
        else
        { // picking end
            EndDate = date.Date.AddDays(1).AddTicks(-1);
            if (AutoApply == true)
            {
                await ClickApply(null);
            }
        }

        if (SingleDatePicker == true)
        {
            StartDate = date.Date;
            EndDate = StartDate;
            await ClickApply(null);
        }
    }

    private void OnHoverDate(DateTimeOffset date)
    {
        if (!EndDate.HasValue)
        {
            HoverDate = date;
        }
    }

    private async Task ClickApply(MouseEventArgs e)
    {
        if (StartDate.HasValue && EndDate.HasValue)
        {
            StateHasChanged();
            await StartDateChanged.InvokeAsync(StartDate.Value);
            await EndDateChanged.InvokeAsync(EndDate.Value);
            await OnRangeSelect.InvokeAsync(new DateRange { Start = StartDate.Value, End = EndDate.Value });
        }
        Close();
    }

    private void ClickCancel(MouseEventArgs e)
    {
        StartDate = OldStartValue;
        EndDate = OldEndValue;
        Close();
        OnCancel.InvokeAsync(true);
    }

    private async Task Clear()
    {
        StartDate = null;
        EndDate = null;
        StateHasChanged();
        await StartDateChanged.InvokeAsync(StartDate);
        await EndDateChanged.InvokeAsync(EndDate);
        Close();
    }
}
